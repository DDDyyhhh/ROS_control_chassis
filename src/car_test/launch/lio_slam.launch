<launch>

    <!-- ==================== 1. 启动底层与通信 ==================== -->
    <!-- 启动与 STM32 的通信 (纯粹的执行器) -->
    <node pkg="rosserial_python" type="serial_node.py" name="serial_node" output="screen">
        <param name="port" value="/dev/ttyUSB0"/>
        <param name="baud" value="115200"/>
        <param name="buffer_size" value="1024"/>
    </node>


    <!-- Gemini Pro 深度相机 -->
    <include file="$(find astra_camera)/launch/gemini.launch"/>

    <!-- 加载机器人 URDF 模型并启动 robot_state_publisher -->
    <!-- 它发布 base_link -> wheels 等关节变换 -->
    <include file="$(find mycar_description)/launch/car.launch" />

    <!-- ==================== 2. 启动传感器 ==================== -->
    <!-- 启动宇树 L2 雷达驱动，它会发布 /unilidar/cloud 和 /unilidar/imu -->
    <include file="$(find unitree_lidar_ros)/launch/run_without_rviz.launch"/>

    <!-- ==================== 3. 【核心】连接 TF 树 ==================== -->
    <!--
        我们只做一件事：告诉 ROS，宇树雷达这个组件的初始位置 (unilidar_imu_initial)
        相对于我们机器人本体 (base_link) 的物理安装位置在哪里。
    -->
    <!-- <node pkg="tf2_ros" type="static_transform_publisher" name="base_to_unitree_broadcaster" 
          args="0.1 0 0.15 0 0 0 base_link unilidar_imu_initial" /> -->
          <!-- 
            args: x y z yaw pitch roll parent_frame child_frame 
            【请用尺子精确测量】宇树雷达安装后，它的 "初始IMU坐标系原点" 
            相对于你的机器人 base_link 原点的位置。
            示例值：雷达组件安装在 base_link 中心前方 10cm，上方 15cm 处。
          -->

    <!-- 
      注意：我们不再需要手动发布 base_link -> unilidar_lidar 的变换了！
      Point-LIO 会根据 base_link -> unilidar_imu 的变换，
      以及它自己 YAML 文件中的 extrinsic_T/R (IMU-to-Lidar) 参数，
      自动计算出 unilidar_lidar 的位姿。
    -->
    <!-- 3. 【核心】启动 EKF 节点 -->
    <!-- 它现在是 odom -> base_footprint 的唯一来源 -->
    <!-- <node pkg="robot_localization" type="ekf_localization_node" name="ekf_se" clear_params="true">
        <rosparam command="load" file="$(find point_lio_unilidar)/config/ekf.yaml" />
    </node> -->



    <!-- ==================== 4. 启动 Point-LIO SLAM 节点 ==================== -->
    <node pkg="point_lio_unilidar" type="pointlio_mapping_STM32" name="laserMapping_STM32" output="screen">
		<rosparam command="load" file="$(find point_lio_unilidar)/config/unilidar_l2_STM32.yaml" />
		
    <param name="odom_frame" value="odom" /> <!-- 让 odomAftMapped 的 child_frame_id 变成 odom -->
    <param name="map_frame" value="map" /> <!-- 让 odomAftMapped 的 header.frame_id 变成 map -->
		<!-- change to 1 to use IMU as input of Point-LIO-->
		<param name="use_imu_as_input" type="bool" value="0"/>
		
		<param name="prop_at_freq_of_imu" type="bool" value="1"/>
		<param name="check_satu" type="bool" value="1"/>
		<param name="init_map_size" type="int" value="10"/>
		<param name="point_filter_num" type="int" value="1"/> 

		<param name="space_down_sample" type="bool" value="1" />
		<param name="filter_size_surf" type="double" value="0.1" /> 
		<param name="filter_size_map" type="double" value="0.1" /> 
		<param name="cube_side_length" type="double" value="1000" /> 
		<param name="runtime_pos_log_enable" type="bool" value="0" /> 
	</node>


  <!-- ==================== 3. 地图转换器 (核心桥梁) ==================== -->
    <!-- 启动 octomap_server，将 3D 点云实时转换为 2D 栅格地图 -->
    <include file="$(find car_test)/launch/octomap_server.launch" />

  <!-- ==================== 4. 导航核心 ==================== -->
    <!-- 启动 move_base，它现在可以订阅由 octomap_server 发布的 /map 话题了 -->
    <include file="$(find nav)/launch/move_base.launch"/>

    
    <!-- ==================== 5. 可视化 ==================== -->
    <!-- <node pkg="rviz" type="rviz" name="rviz" args="-d $(find point_lio_unilidar)/rviz_cfg/loam_livox.rviz" /> -->

</launch>